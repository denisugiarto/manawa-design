import gulp from "gulp";
import cp from "child_process";
import gutil from "gulp-util";
import postcss from "gulp-postcss";
import cssImport from "postcss-import";
import cssnext from "postcss-cssnext";
import BrowserSync from "browser-sync";
import webpack from "webpack";
import webpackConfig from "./webpack.conf";
import svgstore from "gulp-svgstore";
import svgmin from "gulp-svgmin";
import inject from "gulp-inject";
import replace from "gulp-replace";
import cssnano from "cssnano";

import sourcemaps from "gulp-sourcemaps";
import autoprefixer from "gulp-autoprefixer";
import sass from "gulp-sass";
import csso from "gulp-csso";
// import cssnano from "gulp-cssnano";
import concat from "gulp-concat";
import uglify from "gulp-uglify";
import imagemin from "gulp-imagemin";
import hash from "gulp-hash";
import del from "del";
import copy from "gulp-copy";
import zip from "gulp-zip";

//global variable
// const sources       = './package.json';
const gulp          = gulp;
const browserSync   = BrowserSync.create();
const sourcemaps    = gulp-sourcemaps;
const browser_support = [
      'last 2 versions', 
      '> 5%', 
      'Firefox ESR',
      "ie >= 10",
      "ie_mob >= 10",
      "ff >= 30",
      "chrome >= 34",
      "safari >= 7",
      "opera >= 23",
      "ios >= 7",
      "android >= 4.4",
      "bb >= 10"
    ];
const date        = new Date().toISOString().slice(0,10);

// HTML-task variable
const nunjucksRender = gulp-nunjucks-render;

//css-task variable
const sass          = gulp-sass;
const cssnano       = gulp-cssnano;
const csso          = gulp-csso;
const autoprefixer  = gulp-autoprefixer;

//js-task variable
const concat        = gulp-concat;
const uglify        = gulp-uglify;

//image-task variable
const imagemin 			= gulp-imagemin;
    
//staging & delivery variable
const copy          = gulp-copy;
const zip           = gulp-zip;
// css task 
gulp.task('sass', function() {
  return gulp.src("./src/source/sass/**/*.scss")
    .pipe(sourcemaps.init())
		.pipe(sass({outputStyle: 'expanded', errLogToConsole: true}).on('error', sass.logError))
    .pipe(autoprefixer({ browsers: ['last 2 versions'], cascade: false }))
		.pipe(concat('style.min.css'))
    .pipe(csso({autoprefixer: {browsers: browser_support, add: true} }))	
    .pipe(sourcemaps.write('../maps'))
    .pipe(gulp.dest("./src/assets/css/"))
    .pipe(browserSync.stream())
});
// javascript task
gulp.task('javascript', function() {
  return gulp.src('./src/source/js/**/*.js')
    // .pipe(jshint('./.jshintrc'))
    // .pipe(jshint.reporter('default'))
    // .pipe(jshint.reporter('fail'))
    .pipe(sourcemaps.init())
		.pipe(concat('script.min.js'))
    .pipe(uglify())
    .pipe(sourcemaps.write('../maps'))
    .pipe(gulp.dest('./src/assets/js/'))
    .pipe(browserSync.stream())
});
// template engine
gulp.task('nunjucks', function() {
	return gulp.src('./src/source/templates/pages/**/*.+(html|nunjucks|njk)')
		.pipe(nunjucksRender({
		path: ['./src/source/templates/components']
	}))
		.pipe(gulp.dest('./src'))
		.pipe(browserSync.stream())
});
// html task
gulp.task('html', function() {
  return gulp.src('./src/*.html')
    .pipe(gulp.dest('./src'))
    .pipe(browserSync.stream())
});
// image optimizing
gulp.task('images', function(){
	return gulp.src(['./src/source/img/*.+(png|jpg|gif|svg)', './src/source/img/**/*.+(png|jpg|gif|svg)'])
		.pipe(imagemin())
		.pipe(gulp.dest('./src/assets/img'))
		.pipe(browserSync.stream())
});
// static server & task watch
gulp.task('default', function() {
  browserSync.init({
    server: "./src"
  });
  gulp.watch('src/source/sass/**/*.scss', function (event) {
    console.log(event);
    gulp.start('sass');
  });
  gulp.watch('src/source/js/**/*.js', function (event) {
    console.log(event);
    gulp.start('javascript');
  });
	gulp.watch(['src/source/img/**/*.+(png|jpg|gif|svg)'], function (event) {
		console.log(event);
		gulp.start('images');
	});
	gulp.watch(['src/source/templates/pages/**/*.+(html|nunjucks|njk)', 'src/source/templates/components/**/*.+(html|nunjucks|njk)'], function (event) {
			console.log(event);
			gulp.start('nunjucks');
		});
  gulp.watch('src/*.html', function (event) {
    console.log(event);
    gulp.start('html').on('change', browserSync.reload);
  });
});
// staging
gulp.task('dist', function(){
	return gulp.src(['!./src/img/', '!./src/img/**', '!./src/sass/', '!./src/sass/**', '!./src/components/', '!./src/components/**', '!./src/templates/', '!./src/templates/**', '!./src/pages/', '!./src/pages/**', '!./src/js/', '!./src/js/**', '!./src/source/**', './src/**/*'])
    .pipe(gulp.dest('./dist/'))
});

// delivery & compress ( integrated with web & apps )
gulp.task('archive', function(){
	return gulp.src(['!./src/img/', '!./src/img/**', '!./src/sass/', '!./src/sass/**', '!./src/components/', '!./src/components/**', '!./src/templates/', '!./src/templates/**', '!./src/pages/', '!./src/pages/**', '!./src/js/', '!./src/js/**', '!./src/source/**', './src/**/*'])
		.pipe(zip( 'prod_'+ 'dist' + '_' + date +'.zip'))
    .pipe(gulp.dest('./archive'))
});